{"ast":null,"code":"var __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n    d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { Component } from '@angular/core';\nimport { HttpClientModule } from \"@angular/common/http\";\nimport { HttpService } from './http.service';\nimport { NgFor } from '@angular/common';\nimport { NgSwitch, NgSwitchCase, NgSwitchDefault } from \"@angular/common\";\nlet AppComponent = class AppComponent {\n  httpService;\n  pictures = [];\n  error;\n  constructor(httpService) {\n    this.httpService = httpService;\n  }\n  ngOnInit() {\n    this.httpService.getData().subscribe({\n      next: data => this.pictures = data\n    });\n  }\n  toShow = \"\";\n  myInfo2(num) {\n    this.toShow = \"show\" + num;\n  }\n  pictureInfo(num) {\n    return this.pictures[num].name + \", \" + this.pictures[num].author + \", \" + this.pictures[num].year;\n  }\n  numArr = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n  condition;\n  myCond(x, y) {\n    if (x == y) return true;\n  }\n};\nAppComponent = __decorate([Component({\n  selector: 'my-app',\n  // Определяется селектор-css для HTML-элемента, который будет представлять компонент.\n  standalone: true,\n  // указывает, что компонент будет независимым, то есть для него не нужно создавать дополнительных модулей\n  imports: [NgFor, NgSwitch, NgSwitchCase, NgSwitchDefault, HttpClientModule],\n  providers: [HttpService],\n  templateUrl: './app.component.html',\n  styleUrl: './style.component.css'\n})\n// Экспортируется класс компонента AppComponent, в котором определяется модель name.\n], AppComponent);\nexport { AppComponent };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}